{"version":3,"sources":["components/side/TopPanel/TopPanel.tsx","components/base/Button/Button.tsx","components/base/Loader/Loader.tsx","helpers/ColorsParser.ts","components/side/UploadPanel/UploadPanel.tsx","store/app/actions.ts","components/side/Color/Color.tsx","components/side/ColorsPanel/ColorsPanel.tsx","components/side/MainPanel/MainPanel.tsx","App.tsx","store/app/reducers.ts","store/reducers.ts","index.tsx"],"names":["TopPanel","className","Button","React","memo","children","type","disabled","onClick","Loader","colorParser","rgbToHex","color","red","green","blue","toString","rgbToHSL","cmin","Math","min","cmax","max","delta","hue","lightness","round","saturation","abs","toFixed","getColors","context","Promise","resolve","colors","x","y","pixel","getImageData","data","HEX","slice","HSL","amount","mainColors","Object","keys","map","sort","a","b","reverse","forEach","filter","_color","_hue","_lightness","splice","UploadPanel","image","useState","isLoading","setLoading","dispatch","useDispatch","loadedImage","useRef","fileInput","loaderCanvas","current","getContext","clearRect","src","click","ref","accept","onChange","e","loader","target","reader","FileReader","imageData","files","onload","drawImage","then","payload","uploadImage","calculateColors","onloadstart","result","readAsDataURL","alt","Color","style","backgroundColor","ColorsPanel","useEffect","window","scrollTo","document","body","scrollHeight","index","key","MainPanel","useSelector","state","app","App","initialState","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","getElementById"],"mappings":"wWAUeA,G,MANY,kBAAM,yBAAKC,UAAU,aAC5C,yBAAKA,UAAU,sBACX,4BAAQA,UAAU,2BAAlB,gB,OCYOC,G,MAPmBC,IAAMC,MAAK,gBAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,SAAUC,EAA5B,EAA4BA,QAA5B,OAAyC,4BAClFP,UAAU,gBACVK,KAAMA,EACNC,SAAUA,EACVC,QAASA,GACXH,OCLaI,G,MAPU,kBAAM,yBAAKR,UAAU,UAC1C,8BACA,8BACA,8BACA,iC,gQCMiBS,E,kCAAAA,EAKVC,SAAW,SAACC,GAKf,OAJkCA,EAA1BC,KAEuB,GAFGD,EAArBE,OAEkC,EAFbF,EAAdG,MAEsCC,SAAS,KARtDN,EAgBVO,SAAW,SAACL,GAAqB,IAC9BC,EAA0BD,EAA1BC,IAAKC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,KAElBF,GAAO,IACPC,GAAS,IACTC,GAAQ,IAER,IAAIG,EAAOC,KAAKC,IAAIP,EAAKC,EAAOC,GAC5BM,EAAOF,KAAKG,IAAIT,EAAKC,EAAOC,GAC5BQ,EAAQF,EAAOH,EACfM,EAAM,EAENC,EAAY,EA+BhB,OA5BID,EADU,IAAVD,EACM,EACCF,IAASR,GACRC,EAAQC,GAAQQ,EAAS,EAC1BF,IAASP,GACTC,EAAOF,GAAOU,EAAQ,GAEtBV,EAAMC,GAASS,EAAQ,GAGlCC,EAAML,KAAKO,MAAY,GAANF,IAEP,IACNA,GAAO,KAGXC,GAAaJ,EAAOH,GAAQ,EAON,CAClBM,MACAG,aALwB,KAFL,IAAVJ,EAAc,EAAIA,GAAS,EAAIJ,KAAKS,IAAI,EAAIH,EAAY,MAEpCI,QAAQ,GAMrCJ,UALJA,IAA0B,IAAZA,GAAiBI,QAAQ,KAnD1BnB,EAiEVoB,UAAY,SAACC,GAChB,OAAO,IAAIC,SAAQ,SAACC,GAOhB,IANA,IAGIC,EAAc,GAGTC,EAAI,EAAGA,EANF,IAMaA,IACvB,IAAK,IAAIC,EAAI,EAAGA,EANL,IAMiBA,IAAK,CAC7B,IAAMC,EAAaN,EAAQO,aAAaH,EAAGC,EAAG,EAAG,GAAGG,KADvB,cAEFF,EAFE,GAGvBzB,EAAQ,CAAEC,IAHa,KAGRC,MAHQ,KAGDC,KAHC,MAKvByB,EAAM,KAAO,SAAW9B,EAAYC,SAASC,IAAQ6B,OAAO,GAC5DC,EAAMhC,EAAYO,SAASL,GAEjCsB,EAAOM,GAAO,CACVG,OAAQT,EAAOM,GAAON,EAAOM,GAAKG,OAAS,EAAI,EAC/CD,OAMZ,IAAIE,EAAaC,OAAOC,KAAKZ,GAAQa,KAAI,SAAAnC,GACrC,O,yWAAO,CAAP,CACI4B,IAAK5B,GACFsB,EAAOtB,OAEfoC,MAAK,SAACC,EAAGC,GACR,OAAOD,EAAEN,OAASO,EAAEP,UACrBQ,UAGHP,EAAWQ,SAAQ,SAAAxC,GAAU,IAAD,EACQA,EAAM8B,IAA9BlB,EADgB,EAChBA,IAAKC,EADW,EACXA,UAEbmB,EAAaA,EAAWS,QAAO,SAACC,GAAY,IAAD,EACWA,EAAOZ,IAA5Ca,EAD0B,EAC/B/B,IAAsBgC,EADS,EACpB/B,UAEnB,OAAI+B,EAAa/B,GAAa+B,EAAa/B,EAChC6B,EAGPC,EAAO/B,EAAM,IAAM+B,EAAO/B,EAAM,IAAM8B,IAAW1C,EAC1C,KAGJ0C,QAIfrB,EAAQW,EAAWa,OAAO,EAAG,SCtHzC,IAoFeC,EApF6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EACvBC,oBAAS,GADc,mBAChDC,EADgD,KACrCC,EADqC,KAGjDC,EAAWC,cAEXC,EAAcC,iBAAY,MAC1BC,EAAYD,iBAAY,MACxBE,EAAeF,iBAAY,MAgDjC,OAAO,6BAASjE,UAAU,gBACtB,yBAAKA,UAAU,2BAEP4D,EACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQrD,QAAUmD,EAnDb,WACjBI,ECRkC,CACtCzD,KAbuB,gBDqBnBwD,GAAW,GAEX,IACM/B,EADSqC,EAAaC,QACLC,WAAW,MAC5BX,EAAQM,EAAYI,QAE1BtC,EAAQwC,UAAU,EAAG,EAAG,IAAK,KAC7BZ,EAAMa,IAAM,IAGG,WACfL,EAAUE,QAAQI,UAuCAd,EAAmB,QAAX,WAI1B,2BACI1D,UAAU,uBACVyE,IAAKP,EACL7D,KAAK,OACLqE,OAAO,UACPC,SA7Cc,SAACC,GACnB,IAAMC,EAASD,EAAEE,OACXC,EAAS,IAAIC,WAGblD,EADSqC,EAAaC,QACLC,WAAW,MAC5BX,EAAQM,EAAYI,QACnBa,EAPuB,YAOVJ,EAAOK,MAPG,MAS9BxB,EAAMyB,OAAS,WACXrD,EAAQsD,UAAU1B,EAAO,EAAG,EAAG,IAAK,KAEpCjD,EAAYoB,UAAUC,GAASuD,MAAK,SAACpD,GACjC6B,EC9CW,SAACJ,GAAD,MAAkC,CACzDrD,KALwB,eAMxBiF,QAAS5B,GD4CY6B,CAAYzD,IACrBgC,EC1Ce,SAACJ,GAAD,MAAkC,CAC7DrD,KAT4B,mBAU5BiF,QAAS5B,GDwCY8B,CAAgBvD,QAGjC8C,EAAOU,YAAc,WACjB5B,GAAW,IAEfkB,EAAOI,OAAS,WACZtB,GAAW,GACXH,EAAMa,IAAMQ,EAAOW,QAGnBT,GACAF,EAAOY,cAAcV,MAqBzB,4BACIjF,UAAU,uBACVyE,IAAKN,IAET,yBACInE,UAAS,6BAAyB0D,EAAS,UAAY,IACvDe,IAAKT,EACL4B,IAAI,OEtEDC,G,MAXiB,SAAC,GAAe,IACtCtD,EADqC,EAAZ5B,MACb4B,IAElB,OAAO,yBACHvC,UAAU,sBACV8F,MAAO,CAAEC,gBAAiBxD,IAEzBA,KCGMyD,G,MAb6B,SAAC,GAAgB,IAAd/D,EAAa,EAAbA,OAG3C,OAFAgE,qBAAU,kBAAMC,OAAOC,SAAS,EAAGC,SAASC,KAAKC,iBAE1C,6BAAStG,UAAU,gBAElBiC,EAAOa,KAAI,SAACnC,EAAO4F,GAAR,OAAkB,kBAAC,EAAD,CACzBC,IAAKD,EACL5F,MAAOA,UCIR8F,G,MAXa,WAAO,IAAD,EACJC,aAAY,SAACC,GAAD,OAAgBA,EAAMC,OAApDlD,EADsB,EACtBA,MAAOzB,EADe,EACfA,OAEf,OAAO,0BAAMjC,UAAU,cACnB,kBAAC,EAAD,CAAa0D,MAAOA,IAEfA,GAAU,kBAAC,EAAD,CAAazB,OAAQA,OCJ7B4E,G,MALO,kBAAM,oCACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,S,glBCAJ,IAAMC,EAAe,CACjBpD,MAAO,KACPzB,OAAQ,ICNG8E,4BAAgB,CAC3BH,IDQsB,WAA4C,IAA3CD,EAA0C,uDAAlCG,EAAcE,EAAoB,uCACjE,OAAQA,EAAO3G,MACX,ILboB,eKchB,OAAO,KACAsG,EADP,CAEIjD,MAAOsD,EAAO1B,UAGtB,ILlBwB,mBKmBpB,OAAO,KACAqB,EADP,CAEI1E,OAAQ+E,EAAO1B,UAGvB,ILvBmB,cKwBf,OAAO,KACAwB,GAKf,OAAOH,K,QEvBLM,G,MAAQC,sBACbC,EACAC,8BAAoBC,+BAGrBC,IAASC,OAAO,kBAAC,IAAD,CAAUN,MAAOA,GAChC,kBAAC,EAAD,OACYb,SAASoB,eAAe,W","file":"static/js/main.d1d79ecd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './TopPanel.scss';\r\n\r\nconst TopPanel: React.FC = () => <nav className=\"top-panel\">\r\n    <div className=\"top-panel__wrapper\">\r\n        <header className=\"top-panel__project-name\">colorify</header>\r\n    </div>\r\n</nav>\r\n\r\nexport default TopPanel;\r\n","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\ninterface IButton {\r\n    children?: any;\r\n    type?: \"button\" | \"submit\" | \"reset\" | undefined;\r\n    disabled?: boolean;\r\n    onClick?:  any;\r\n}\r\n  \r\nconst Button: React.FC<IButton> = React.memo(({children, type, disabled, onClick}) => <button\r\n    className=\"simple-button\"\r\n    type={type}\r\n    disabled={disabled}\r\n    onClick={onClick}\r\n>{children}</button>)\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nimport './Loader.scss';\r\n\r\nconst Loader: React.FC = () => <div className=\"loader\">\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n</div>\r\n\r\nexport default Loader;","type RGB = {\r\n    red: number;\r\n    green: number;\r\n    blue: number;\r\n}\r\n\r\ntype HSL = {\r\n    hue: number;\r\n    saturation: number;\r\n    lightness: number\r\n}\r\n\r\ntype HEX = string;\r\n\r\nexport default class colorParser {\r\n\r\n    /**\r\n     * Convert RGB color to HEX color.\r\n     */\r\n    static rgbToHex = (color: RGB): HEX => {\r\n        const { red, green, blue }: RGB = color;\r\n\r\n        const HEXColor: HEX = ((red << 16) | (green << 8) | blue).toString(16);\r\n\r\n        return HEXColor;\r\n    }\r\n\r\n    /**\r\n     * Convert RGB color to HSL color.\r\n     */\r\n    static rgbToHSL = (color: RGB): HSL => {\r\n        let { red, green, blue }: RGB = color;\r\n\r\n        red /= 255;\r\n        green /= 255;\r\n        blue /= 255;\r\n\r\n        let cmin = Math.min(red, green, blue),\r\n            cmax = Math.max(red, green, blue),\r\n            delta = cmax - cmin,\r\n            hue = 0,\r\n            saturation = 0,\r\n            lightness = 0;\r\n\r\n        if (delta === 0) {\r\n            hue = 0;\r\n        } else if (cmax === red) {\r\n            hue = ((green - blue) / delta) % 6;\r\n        } else if (cmax === green) {\r\n            hue = (blue - red) / delta + 2;\r\n        } else {\r\n            hue = (red - green) / delta + 4;\r\n        }\r\n\r\n        hue = Math.round(hue * 60);\r\n\r\n        if (hue < 0) {\r\n            hue += 360;\r\n        }\r\n\r\n        lightness = (cmax + cmin) / 2;\r\n\r\n        saturation = delta === 0 ? 0 : delta / (1 - Math.abs(2 * lightness - 1));\r\n\r\n        saturation = +(saturation * 100).toFixed(1);\r\n        lightness = +(lightness * 100).toFixed(1);\r\n\r\n        const HSLColor: HSL = {\r\n            hue,\r\n            saturation,\r\n            lightness\r\n        };\r\n\r\n        return HSLColor;\r\n    }\r\n\r\n    /**\r\n     * Get colors from canvas context.\r\n     */\r\n    static getColors = (context: CanvasRenderingContext2D): Promise<any> => {\r\n        return new Promise((resolve) => {\r\n            const WIDTH = 300;\r\n            const HEIGHT = 150;\r\n\r\n            let colors: any = {};\r\n\r\n            // Getting colors.\r\n            for (let x = 0; x < WIDTH; x++) {\r\n                for (let y = 0; y < HEIGHT; y++) {\r\n                    const pixel: any = context.getImageData(x, y, 1, 1).data;\r\n                    const [red, green, blue] = pixel;\r\n                    const color = { red, green, blue }\r\n\r\n                    const HEX = \"#\" + (\"000000\" + colorParser.rgbToHex(color)).slice(-6);\r\n                    const HSL = colorParser.rgbToHSL(color);\r\n\r\n                    colors[HEX] = {\r\n                        amount: colors[HEX] ? colors[HEX].amount + 1 : 1,\r\n                        HSL\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Getting structure of colors array and sorting.\r\n            let mainColors = Object.keys(colors).map(color => {\r\n                return {\r\n                    HEX: color,\r\n                    ...colors[color]\r\n                }\r\n            }).sort((a, b) => {\r\n                return a.amount - b.amount\r\n            }).reverse();\r\n\r\n            // Deleting of excesses values.\r\n            mainColors.forEach(color => {\r\n                const { hue, lightness }: HSL = color.HSL;\r\n\r\n                mainColors = mainColors.filter((_color) => {\r\n                    const { hue: _hue, lightness: _lightness }: HSL = _color.HSL\r\n\r\n                    if (_lightness > lightness || _lightness < lightness) {\r\n                        return _color;\r\n                    }\r\n\r\n                    if (_hue > hue - 10 && _hue < hue + 10 && _color !== color) {\r\n                        return null;\r\n                    }\r\n\r\n                    return _color;\r\n                });\r\n            })\r\n\r\n            resolve(mainColors.splice(0, 25));\r\n        })\r\n    }\r\n}","import React, { useRef, useState } from 'react';\r\nimport Button from '../../base/Button/Button';\r\nimport Loader from '../../base/Loader/Loader';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { uploadImage, clearImage, calculateColors } from '../../../store/app/actions';\r\n\r\nimport './UploadPanel.scss';\r\nimport colorParser from '../../../helpers/ColorsParser';\r\n\r\ninterface IUploadPanel {\r\n    image: string;\r\n}\r\n\r\nconst UploadPanel: React.FC<IUploadPanel> = ({ image }) => {\r\n    const [isLoading, setLoading] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const loadedImage = useRef<any>(null);\r\n    const fileInput = useRef<any>(null);\r\n    const loaderCanvas = useRef<any>(null);\r\n\r\n    const onClearImage = () => {\r\n        dispatch(clearImage());\r\n        setLoading(false);\r\n\r\n        const canvas = loaderCanvas.current;\r\n        const context = canvas.getContext('2d');\r\n        const image = loadedImage.current;\r\n\r\n        context.clearRect(0, 0, 300, 150);\r\n        image.src = '';\r\n    }\r\n\r\n    const onFileOpen = () => {\r\n        fileInput.current.click();\r\n    }\r\n\r\n    const onFileOpening = (e: any) => {\r\n        const loader = e.target;\r\n        const reader = new FileReader();\r\n\r\n        const canvas = loaderCanvas.current;\r\n        const context = canvas.getContext('2d');\r\n        const image = loadedImage.current;\r\n        const [imageData] = loader.files;\r\n\r\n        image.onload = () => {\r\n            context.drawImage(image, 0, 0, 300, 150);\r\n\r\n            colorParser.getColors(context).then((colors) => {\r\n                dispatch(uploadImage(context));\r\n                dispatch(calculateColors(colors));\r\n            });\r\n        }\r\n        reader.onloadstart = () => {\r\n            setLoading(true);\r\n        }\r\n        reader.onload = () => {\r\n            setLoading(false);\r\n            image.src = reader.result;\r\n        }\r\n\r\n        if (imageData) {\r\n            reader.readAsDataURL(imageData);\r\n        }\r\n    }\r\n\r\n    return <section className=\"upload-panel\">\r\n        <div className=\"upload-panel__top-panel\">\r\n            {\r\n                isLoading ?\r\n                    <Loader /> :\r\n                    <Button onClick={!image ? onFileOpen : onClearImage}>\r\n                        {!image ? 'Upload' : 'Clear'}\r\n                    </Button>\r\n            }\r\n        </div>\r\n        <input\r\n            className=\"upload-panel__loader\"\r\n            ref={fileInput}\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onFileOpening}\r\n        />\r\n        <canvas\r\n            className=\"upload-panel__loader\"\r\n            ref={loaderCanvas}\r\n        ></canvas>\r\n        <img\r\n            className={`upload-panel__image${(image) ? \" loaded\" : \"\"}`}\r\n            ref={loadedImage}\r\n            alt=\"\"\r\n        />\r\n    </section>\r\n}\r\n\r\nexport default UploadPanel;\r\n","import IAction from \"../interfaces\";\r\n\r\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\r\nexport const CALCULATE_COLORS = 'CALCULATE_COLORS';\r\nexport const CLEAR_IMAGE = 'CLEAR_IMAGE';\r\n\r\nexport const uploadImage = (image: ImageBitmap): IAction => ({\r\n    type: UPLOAD_IMAGE,\r\n    payload: image\r\n});\r\n\r\nexport const calculateColors = (image: ImageBitmap): IAction => ({\r\n    type: CALCULATE_COLORS,\r\n    payload: image\r\n})\r\n\r\nexport const clearImage = (): IAction => ({\r\n    type: CLEAR_IMAGE\r\n});","import React from 'react';\r\n\r\nimport './Color.scss';\r\n\r\nexport type TColor = {\r\n    HEX: string;\r\n}\r\n\r\ninterface IColor {\r\n    color: TColor\r\n}\r\n\r\nconst Color: React.FC<IColor> = ({ color }) => {\r\n    const HEX = color.HEX;\r\n\r\n    return <div\r\n        className=\"colors-panel__color\"\r\n        style={{ backgroundColor: HEX }}\r\n    >\r\n        {HEX}\r\n    </div>\r\n}\r\n\r\nexport default Color;\r\n","import React, { useEffect } from 'react';\r\nimport Color, { TColor } from '../Color/Color';\r\n\r\nimport './ColorsPanel.scss';\r\n\r\ninterface IColorsPanel {\r\n    colors: TColor[];\r\n}\r\n\r\nconst ColorsPanel: React.FC<IColorsPanel> = ({ colors }) => {\r\n    useEffect(() => window.scrollTo(0, document.body.scrollHeight));\r\n\r\n    return <section className=\"colors-panel\">\r\n        {\r\n            colors.map((color, index) => <Color\r\n                key={index}\r\n                color={color}\r\n            />)\r\n        }\r\n    </section>\r\n}\r\n\r\nexport default ColorsPanel;","import React from 'react';\r\nimport UploadPanel from '../UploadPanel/UploadPanel';\r\nimport ColorsPanel from '../ColorsPanel/ColorsPanel';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './MainPanel.scss';\r\nimport ColorsStub from '../ColorsStub/ColorsStub';\r\n\r\nconst MainPanel: React.FC = () => {\r\n    const { image, colors } = useSelector((state: any) => state.app);\r\n\r\n    return <main className=\"main-panel\">\r\n        <UploadPanel image={image}/>\r\n        {\r\n            (image) && <ColorsPanel colors={colors}/>\r\n        }\r\n    </main>\r\n}\r\n\r\nexport default MainPanel;\r\n","import React from 'react';\r\nimport TopPanel from './components/side/TopPanel/TopPanel';\r\nimport MainPanel from './components/side/MainPanel/MainPanel';\r\n\r\nimport './App.scss'\r\n\r\nconst App: React.FC = () => <>\r\n    <TopPanel/>\r\n    <MainPanel/>\r\n</>\r\n\r\nexport default App;\r\n","import IAction from \"../interfaces\";\r\n\r\nimport { \r\n    UPLOAD_IMAGE,\r\n    CLEAR_IMAGE,\r\n    CALCULATE_COLORS\r\n } from \"./actions\";\r\n\r\nconst initialState = {\r\n    image: null,\r\n    colors: []\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: IAction) => {\r\n    switch (action.type) {\r\n        case UPLOAD_IMAGE: {\r\n            return {\r\n                ...state,\r\n                image: action.payload\r\n            }\r\n        }\r\n        case CALCULATE_COLORS: {\r\n            return {\r\n                ...state,\r\n                colors: action.payload\r\n            }\r\n        }\r\n        case CLEAR_IMAGE: {\r\n            return {\r\n                ...initialState\r\n            }\r\n        }\r\n    }\r\n\r\n    return state;\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { appReducer } from '../store/app/reducers';\r\n\r\nexport default combineReducers({\r\n    app: appReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './store/reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport './index.scss';\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeWithDevTools(applyMiddleware())\r\n);\r\n\r\nReactDOM.render(<Provider store={store}>\r\n\t<App />\r\n</Provider>, document.getElementById('root'));"],"sourceRoot":""}